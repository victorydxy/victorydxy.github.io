<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>IDEA使用相关</title>
    <url>/2020/05/08/idea_use/</url>
    <content><![CDATA[<h1 id="IDEA使用相关"><a href="#IDEA使用相关" class="headerlink" title="IDEA使用相关"></a>IDEA使用相关</h1><p>1.target目录没有更新</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在pom.xml添加上述文件然后 mvn clean</p>
<p>2.</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7 相关命令</title>
    <url>/2020/05/09/centos7/</url>
    <content><![CDATA[<p>Centos7 相关命令</p>
<p>1.停止防火墙</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>

<p>2.wget 未找到</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">yum -y install wget</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>liunx</tag>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>docker fastdfs &amp; smb</title>
    <url>/2020/05/08/docker_fastdfs/</url>
    <content><![CDATA[<p>容器镜像加速：</p>
<p>sudo mkdir -p /etc/docker </p>
<p>sudo tee /etc/docker/daemon.json<br> &lt;&lt;-‘EOF’ </p>
<p>{ “registry-mirrors”: [“<a href="https://ij6khljp.mirror.aliyuncs.com/" target="_blank" rel="noopener">https://ij6khljp.mirror.aliyuncs.com</a>“] } </p>
<p>EOF</p>
<p> sudo systemctl daemon-reload </p>
<p>sudo systemctl restart docker</p>
<p>centos 下载docker：</p>
<p>yum -y install docker-io</p>
<p>centos6.5运行命令yum install docker.io，发生错误</p>
<p>No package docker available</p>
<p>yum没有找到docker包，更新epel第三方软件库，运行命令：</p>
<p>sudo yum install epel-release</p>
<p>之后运行：</p>
<p>sudo yum install docker-io</p>
<p>之后就可以愉快地安装了。</p>
<p>docker run -it –name samba -p 139:139 -p 445:445 -v /file/sparesManage/:/file/sparesManage/ -v /etc/passwd:/etc/passwd -v /etc/group:/etc/group -d dperson/samba -s “root;/file/sparesManage/;yes;no;no;all;none”</p>
<p> TRACKER_SERVER ： tracker服务端ip</p>
<p> TR_NGX_PORT ： tracker服务端上运行的nginx端口</p>
<p> ST_NGX_PORT ： storage服务端上运行的nginx端口</p>
<p> 62e919b7efc1 : 镜像id</p>
<p> t1 ： tracker服务端名称</p>
<p>拉取镜像：</p>
<p>docker image pull delron/fastdfs</p>
<p>查看镜像：</p>
<p>[root@iZh3cshm0xz7wjZ ~]# docker images</p>
<p>REPOSITORY           TAG         IMAGE ID      CREATED       SIZE</p>
<p>docker.io/morunchang/fastdfs  latest       a729ac95698a    18 months ago    460.1 MB </p>
<p>3.运行tracker：</p>
<p> docker run -itd –name tracker –net=host  -v /data/fastdfs/tracker_data:/fastdfs/tracker/data 0109554e5a05 sh tracker.sh</p>
<p>4.运行storage：</p>
<p>docker run -d –name storage -v /data/fastdfs/storage_data:/data/fast_data/data –net=host -e TRACKER_IP=10.134.82.116:22122 -e GROUP_NAME=group1 0109554e5a05 sh storage.sh</p>
<p>Nginx : /etc/nginx/conf/nginx.conf</p>
<p>fastdf配置文件位置：/etc/fdfs</p>
<p>使用nginx显示原来的文件名字：</p>
<p>修改Nginx配置文件:</p>
<p>location / GroupDFS1/M00 {</p>
<p>​      root /home/yuqing/FastDFS/data;</p>
<p>​        if ($request_filename ~* ^.*?.(txt|doc|pdf|rar|gz|zip|docx|exe|xlsx|ppt|pptx)$){</p>
<p>​            add_header Content-Disposition: ‘attachment;’;</p>
<p>​        }</p>
<p>​        if ($arg_attname ~ “^(.*)”) {</p>
<p>​            add_header Content-Disposition “attachment;filename=$arg_attname”;</p>
<p>​        }</p>
<p>​      ngx_fastdfs_module;</p>
<p>​    }</p>
<p>SMB:</p>
<p>/file/sparesManage</p>
<p>docker run -it –name samba -p 139:139 -p 445:445 -v /file/sparesManage:/mount -v /etc/passwd:/etc/passwd -v /etc/group:/etc/group -d dperson/samba -s “www;/mount/;yes;no;no;all;none”</p>
<p>docker run –name samba -it -p 139:139 -p 445:445 -v /file/sparesManage:/file/sparesManage   -v /etc/passwd:/etc/passwd -v /etc/group:/etc/group -d dperson/samba -s “www;/mount/;yes;no;no;all;none”</p>
<p>docker run -itd –name nginx -p 8088:80 -v /file/sparesManage:/file/sparesManage nginx </p>
<p>apt-get install procps </p>
<p>VI:</p>
<p>apt-get update</p>
<p>apt-get install vim</p>
<p>Ps:</p>
<p>apt-get install procps</p>
<p>cd /etc/nginx/conf.d/ </p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>maven设置私服地址</title>
    <url>/2020/05/08/maven_error/</url>
    <content><![CDATA[<p>在setting.xml、pom.xml中加入如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Release Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://182.254.158.159:9090/nexus/content/repositories/thirdparty<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>mongodb安装：</title>
    <url>/2020/05/09/mongodb%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>1.mongodb安装：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">D:\Developer_tools\MongoDB\bin\mongod.exe --config "D:\Developer_tools\MongoDB\config\mongod.cfg" --install</span><br></pre></td></tr></table></figure>



<p>2、代码换行    // enter</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">回车</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>db</tag>
      </tags>
  </entry>
  <entry>
    <title>rebbitmq学习笔记</title>
    <url>/2020/05/09/rabbitmq%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>1.centos7上安装rabbitmq</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1).docker 安装 </span><br><span class="line">yum install -y docker</span><br><span class="line">启动docker服务</span><br><span class="line">2).service docker start </span><br><span class="line">设置docker镜像源为阿里云</span><br><span class="line">3).vi &#x2F;etc&#x2F;docker&#x2F;daemon.json </span><br><span class="line">加入内容如下：</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;:  [&quot;https:&#x2F;&#x2F;halo2593.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">4).重新启动启动docker服务</span><br><span class="line">service docker restart </span><br><span class="line">5).拉取镜像</span><br><span class="line">docker pull rabbitmq:3.7.7-management</span><br><span class="line">6).创建容器</span><br><span class="line"> docker run -d --name rabbitmq3.7.7 -p 5672:5672 -p 15672:15672 --privileged&#x3D;true -v &#x2F;data:&#x2F;var&#x2F;lib&#x2F;rabbitmq --hostname myRabbit -e RABBITMQ_DEFAULT_VHOST&#x3D;my_vhost  -e RABBITMQ_DEFAULT_USER&#x3D;admin -e RABBITMQ_DEFAULT_PASS&#x3D;admin 2888deb59dfc</span><br><span class="line">ps：</span><br><span class="line">-d 后台运行容器；</span><br><span class="line">--name 指定容器名；</span><br><span class="line">--privileged&#x3D;true 给予宿主机权限</span><br><span class="line">-p 指定服务运行的端口（5672：应用访问端口；15672：控制台Web端口号）；</span><br><span class="line">-v 映射目录或文件；</span><br><span class="line">--hostname  主机名（RabbitMQ的一个重要注意事项是它根据所谓的 “节点名称” 存储数据，默认为主机名）；</span><br><span class="line">-e 指定环境变量；（RABBITMQ_DEFAULT_VHOST：默认虚拟机名；RABBITMQ_DEFAULT_USER：默认的用户名；RABBITMQ_DEFAULT_PASS：默认用户名的密码）</span><br><span class="line">2888deb59dfc是镜像id</span><br><span class="line">7).查看容器</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<p>看到如下截图证明安装ok。</p>
<p><img src="https://i.loli.net/2020/05/11/pRjcwOlFnsoa7Aq.png" alt="image-20200511141441497"></p>
<p><img src="https://i.loli.net/2020/05/11/jzeS7MWGQihknyU.png" alt="image-20200511141550773"></p>
<p>2.关于Mq的功能</p>
<p>  异步 解耦 限流</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>mq</tag>
      </tags>
  </entry>
  <entry>
    <title>maven阿里云中央仓库</title>
    <url>/2020/05/08/maven_aliyun/</url>
    <content><![CDATA[<!-- 阿里云中央仓库 -->
<pre><code>&lt;mirror&gt;
    &lt;id&gt;nexus-aliyun&lt;/id&gt;
    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;
    &lt;name&gt;Nexus aliyun&lt;/name&gt;
    &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;
&lt;/mirror&gt;</code></pre>]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>rocketmq 在centos上安装：</title>
    <url>/2020/05/09/rocketmq/</url>
    <content><![CDATA[<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1.启动namesrc服务：</span><br><span class="line"></span><br><span class="line">nohup sh bin/mqnamesrv &amp;</span><br><span class="line"></span><br><span class="line">tail -f ~/logs/rocketmqlogs/namesrv.log</span><br><span class="line"></span><br><span class="line">tail -f  /data/mq/rocketmq-all-4.4.0/distribution/target/apache-rocketmq/logs/rocketmqlogs/namesrc.log</span><br></pre></td></tr></table></figure>

<p>2.启动broker：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">nohup sh bin/mqbroker -n localhost:9876 &amp;</span><br><span class="line"></span><br><span class="line"> tail -f ~/logs/rocketmqlogs/broker.log</span><br></pre></td></tr></table></figure>

<p>3.生产消费messsage：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">export NAMESRV_ADDR=localhost:9876</span><br><span class="line">sh bin/tools.sh org.apache.rocketmq.example.quickstart.Producer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sh bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer</span><br></pre></td></tr></table></figure>

<p>4.关闭服务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh bin&#x2F;mqshutdown broker</span><br><span class="line"></span><br><span class="line">sh bin&#x2F;mqshutdown namesrv</span><br></pre></td></tr></table></figure>



<p>5.问题：</p>
<p>Broker 禁止自动创建 Topic，且用户没有通过手工方式创建 Topic：<br>可以在 Rocket_HOME/distribution/target/apache-rocketmq 下执行 “ sh bin/mqbroker -m “ 来查看 broker 的配置参数<br>所示，autoCreateTopicEnable=true 证明是没有问题的</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>liunx</tag>
        <tag>mq</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot动态配置：</title>
    <url>/2020/05/08/springboot_%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>1.使用@Component注解注册成组件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注册成一个组件</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigTwo</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Value</span>(<span class="string">"$&#123;test.name&#125;"</span>)</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.使用@ConfigurationProperties注解和启动类上@EnableConfigurationProperties({ConfigBean.class}) 这个还是使用spring的配置文件里的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">@ConfigurationProperties(prefix &#x3D; &quot;test&quot;)</span><br><span class="line">public class ConfigOne &#123;</span><br><span class="line">	</span><br><span class="line">	private String name;</span><br><span class="line"></span><br><span class="line">	public String getName() &#123;</span><br><span class="line">		return name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void setName(String name) &#123;</span><br><span class="line">		this.name &#x3D; name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191211171354555.png" alt="image-20191211171354555"></p>
<p>3.使用@EnableConfigurationProperties({TestConfigBean.class}) 和</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:person.properties"</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Primary</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigThree</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123;ConfigThree<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">RestController</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">Demo3Application2</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//	@Autowired</span></span><br><span class="line"><span class="comment">//	private ConfigTwo configtwo;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//	@Autowired</span></span><br><span class="line"><span class="comment">//	private ConfigOne configone;</span></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> ConfigThree configthree;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(Demo3Application2<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//	</span></span><br><span class="line"><span class="comment">//	@GetMapping("/")</span></span><br><span class="line"><span class="comment">//	public String hello() &#123;</span></span><br><span class="line"><span class="comment">//		return configone.getName();</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">//	@GetMapping("/")</span></span><br><span class="line"><span class="comment">//	public String hello() &#123;</span></span><br><span class="line"><span class="comment">//		return configtwo.getName();</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line">	</span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> configthree.getName();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>正则语法</title>
    <url>/2020/05/08/%E6%AD%A3%E5%88%99%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">title: 正则表达式</span><br><span class="line">date: 2020-05-08 11:35:21</span><br><span class="line">tags:</span><br><span class="line">- web</span><br><span class="line">categories:</span><br><span class="line">- tools</span><br><span class="line"></span><br><span class="line">正则表达式的书写语法</span><br><span class="line"></span><br><span class="line">1、^  表示匹配字符串的开始位置  (例外  用在中括号中[ ] 时,可以理解为取反,表示不匹配括号中字符串)</span><br><span class="line"></span><br><span class="line">2、$  表示匹配字符串的结束位置</span><br><span class="line"></span><br><span class="line">3、*  表示匹配 零次到多次</span><br><span class="line"></span><br><span class="line">4、+  表示匹配 一次到多次 (至少有一次)</span><br><span class="line"></span><br><span class="line">5、?  表示匹配零次或一次</span><br><span class="line"></span><br><span class="line">6、.  表示匹配单个字符 </span><br><span class="line"></span><br><span class="line">7、|  表示为或者,两项中取一项</span><br><span class="line"></span><br><span class="line">8、(  ) 小括号表示匹配括号中全部字符</span><br><span class="line"></span><br><span class="line">9、[  ] 中括号表示匹配括号中一个字符 范围描述 如[0-9 a-z A-Z]</span><br><span class="line"></span><br><span class="line">10、&#123;  &#125; 大括号用于限定匹配次数  如 &#123;n&#125;表示匹配n个字符  &#123;n,&#125;表示至少匹配n个字符  &#123;n,m&#125;表示至少n,最多m</span><br><span class="line"></span><br><span class="line">11、\  转义字符 如上基本符号匹配都需要转义字符   如 *  表示匹配*号</span><br><span class="line"></span><br><span class="line">12、\w 表示英文字母和数字  \W  非字母和数字</span><br><span class="line"></span><br><span class="line">13、\d  表示数字   \D  非数字</span><br></pre></td></tr></table></figure>





]]></content>
  </entry>
  <entry>
    <title>tomcat配置之docBase：</title>
    <url>/2020/05/08/tomcat_docbase/</url>
    <content><![CDATA[<p>tomcat使用默认的80端口需要配置的docBase：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/"</span> <span class="attr">docBase</span>=<span class="string">"/data/soft/tomcat/webapps/jenkins"</span> <span class="attr">debug</span>=<span class="string">"0"</span> <span class="attr">reloadable</span>=<span class="string">"true"</span> <span class="attr">crossContext</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>








]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>设计原则</title>
    <url>/2020/05/09/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<p>学习设计原则，学习设计模式的基础。在实际开发过程中，并不是一定要求所有代码都遵循设计原则，我们要考虑人力、时间、成本、质量，不是刻意追求完美，要在适当的场景遵循设计原则，体现的是一种平衡取舍，帮助我们设计出更加优雅的代码结构。</p>
<p>课程大纲</p>
<p><strong>第**</strong>1<strong>**章</strong> <strong>Open-Closed Principle**</strong>开闭原则**</p>
<p>1.1 开闭原则定义：</p>
<p>开闭原则（Open-Closed Principle, OCP）是指一个软件实体如类、模块和函数应该对扩展开放，</p>
<p>对修改关闭。所谓的开闭，也正是对扩展和修改两个行为的一个原则。强调的是用抽象构建框架，用实</p>
<p>现扩展细节。可以提高软件系统的可复用性及可维护性。开闭原则，是面向对象设计中最基础的设计原</p>
<p>则。它指导我们如何建立稳定灵活的系统，例如：我们版本更新，我尽可能不修改源代码，但是可以增</p>
<p>加新功能。</p>
<p>在现实生活中对于开闭原则也有体现。比如，很多互联网公司都实行弹性制作息时间，规定每天工</p>
<p>作 8 小时。意思就是说，对于每天工作 8 小时这个规定是关闭的，但是你什么时候来，什么时候走是开</p>
<p>放的。早来早走，晚来晚走。</p>
<p>1.2 开闭原则优点：</p>
<p> 提高软件系统的可复用性和可维护性</p>
<p>1.3 案例代码实战:</p>
<p><a href="https://gitee.com/victorydeng/my2020study/tree/master/src/main/java/com/dxy/yesas2020goals/study/partone/disignprinciple/openclosedprinciple" target="_blank" rel="noopener">https://gitee.com/victorydeng/my2020study/tree/master/src/main/java/com/dxy/yesas2020goals/study/partone/disignprinciple/openclosedprinciple</a></p>
<p>第2原则 Dependence Inversion Principle依赖倒置原则</p>
<p>2.1 依赖倒置原则定义：</p>
<p>高层模块不应该依赖底层模块，二者都应该依赖其抽象，抽象不该依赖细节，细节要依赖抽象，即我们要针对接口编程而不是对实现编程。</p>
<p>2.2 依赖倒置原则优点：</p>
<p>减少类间的耦合度，提高系统稳定性、可读性、可维护性，降低修改程序造成的风险。</p>
<p>2.3 案例代码实战：</p>
<p><a href="https://gitee.com/victorydeng/my2020study/tree/master/src/main/java/com/dxy/yesas2020goals/study/partone/disignprinciple/dependenceinversionprinciple" target="_blank" rel="noopener">https://gitee.com/victorydeng/my2020study/tree/master/src/main/java/com/dxy/yesas2020goals/study/partone/disignprinciple/dependenceinversionprinciple</a></p>
<p>第3原则 Simple Responsibility Principle单一职责原则</p>
<p>3.1 单一职责原则定义：</p>
<p>单一职责是指不要存在多于一个导致类变更的原因。假设我们有一个 Class 负责两个职责，一旦发生需求变更，修改其中一个职责的逻辑代码，有可能会导致另一个职责的功能发生故障。这样一来，这个 Class 存在两个导致类变更的原因。如何解决这个问题呢？我们就要给两个职责分别用两个 Class 来实现，进行解耦。后期需求变更维护互不影响。这样的设计，可以降低类的复杂度，提高类的可读性，提高系统的可维护性，降低变更引起的风险。总体来说就是一个 Class/Interface/Method 只负责一项职责。</p>
<p>3.2 单一职责原则优点：</p>
<p>降低类的复杂度，提高可读性、可维修性，减少修改带来的风险。</p>
<p>3.3 案例代码实战：</p>
<p><a href="https://gitee.com/victorydeng/my2020study/tree/master/src/main/java/com/dxy/yesas2020goals/study/partone/disignprinciple/simpleresponsibility" target="_blank" rel="noopener">https://gitee.com/victorydeng/my2020study/tree/master/src/main/java/com/dxy/yesas2020goals/study/partone/disignprinciple/simpleresponsibility</a></p>
<p>第4原则 Interface Segregation Principle接口隔离原则</p>
<p>4.1 接口隔离原则定义：</p>
<p>接口隔离原则是指用多个专门的接口，而不使用单一的总接口，客户端不应该依赖它不需要的接口。这个原则指导我们在设计接口时应当注意一下几点：1、一个类对一类的依赖应该建立在最小的接口之上。2、建立单一接口，不要建立庞大臃肿的接口。3、尽量细化接口，接口中的方法尽量少（不是越少越好，一定要适度）</p>
<p>4.2 接口隔离原则优点：</p>
<p>接口隔离原则符合我们常说的高内聚低耦合的设计思想，从而使得类具有很好的可读性、可扩展性和可维护性。</p>
<p>4.3 案例代码实战：</p>
<p><a href="https://gitee.com/victorydeng/my2020study/tree/master/src/main/java/com/dxy/yesas2020goals/study/partone/disignprinciple/interfacesegregation" target="_blank" rel="noopener">https://gitee.com/victorydeng/my2020study/tree/master/src/main/java/com/dxy/yesas2020goals/study/partone/disignprinciple/interfacesegregation</a></p>
<p>第5原则 Law of Demeter 迪米特法则</p>
<p>5.1 迪米特法则定义:</p>
<p>迪米特原则是指一个对象应该对其他对象保持最少的了解，又叫最少知道原则，尽量降低类与类之间的耦合。迪米特原则主要强调只和朋友交流，不和陌生人说话。出现在成员变量、方法的输入、输出参数中的类都可以称之为成员朋友类，而出现在方法体内部的类不属于朋友类。</p>
<p>5.2 迪米特优点:</p>
<p>降低类间的耦合度</p>
<p>5.3 案例代码实战:</p>
<p><a href="https://gitee.com/victorydeng/my2020study/tree/master/src/main/java/com/dxy/yesas2020goals/study/partone/disignprinciple/demeter" target="_blank" rel="noopener">https://gitee.com/victorydeng/my2020study/tree/master/src/main/java/com/dxy/yesas2020goals/study/partone/disignprinciple/demeter</a></p>
<p>第6原则 Liskov Substitution Principle里氏替换原则</p>
<p>6.1 里氏替换原则定义：</p>
<p>里氏替换原则是指如果对每一个类型为 T1 的对象 o1,都有类型为 T2 的对象 o2,使得以 T1 定义的所有程序 P 在所有的对象 o1 都替换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。定义看上去还是比较抽象，我们重新理解一下，可以理解为一个软件实体如果适用一个父类的话，那一定是适用于其子类，所有引用父类的地方必须能透明地使用其子类的对象，子类对象能够替换父类对象，而程序逻辑不变。根据这个理解，我们总结一下如下：子类可以扩展父类的功能，但不能改变父类原有的功能。</p>
<p>引申含义：</p>
<p>1、子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。</p>
<p>2、子类中可以增加自己特有的方法。</p>
<p>3、当子类的方法重载父类的方法时，方法的前置条件（即方法的输入/入参）要比父类方法的输入参数更宽松。</p>
<p>4、当子类的方法实现父类的方法时（重写/重载或实现抽象方法），方法的后置条件（即方法的输出/返回值）要比父类更严格或相等。</p>
<p>6.2 里氏替换原则优点：</p>
<p>避免继承泛滥，增加程序的健壮性和兼容性，体现了开闭原则，降低变更时带来的风险。</p>
<p>6.3 案例代码实战： </p>
<p><a href="https://gitee.com/victorydeng/my2020study/tree/master/src/main/java/com/dxy/yesas2020goals/study/partone/disignprinciple/liskovsutiution" target="_blank" rel="noopener">https://gitee.com/victorydeng/my2020study/tree/master/src/main/java/com/dxy/yesas2020goals/study/partone/disignprinciple/liskovsutiution</a></p>
<p>第7原则 Composite&amp;Aggregate Reuse Principle合成复用原则</p>
<p>7.1 合成复用原则定义：</p>
<p>合成复用原则是指尽量使用对象组合(has-a)/聚合(contanis-a)，而不是继承关系达到软件复用的目的。可以使系统更加灵活，降低类与类之间的耦合度，一个类的变化对其他类造成的影响相对较少。</p>
<p>7.2 合成复用原则优点：</p>
<p>系统更加灵活，降低类和类之间的耦合度，一个类的变化对其他类造成的影响相对较少。</p>
<p>7.3 案例代码实战：</p>
<p><a href="https://gitee.com/victorydeng/my2020study/tree/master/src/main/java/com/dxy/yesas2020goals/study/partone/disignprinciple/compositeaggregatereuse" target="_blank" rel="noopener">https://gitee.com/victorydeng/my2020study/tree/master/src/main/java/com/dxy/yesas2020goals/study/partone/disignprinciple/compositeaggregatereuse</a></p>
<p>总结：设计原则是前辈们多年开发设计软件过程中总结出来的经验，我们在开发过程中遇到问题可以从上面的几个方面去思考，当然啦有的原则直接有冲突和重叠，比如接口隔离和单一职责就有重叠的，我们没有必要刻意去使用。</p>
]]></content>
      <categories>
        <category>javaEE</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
</search>
